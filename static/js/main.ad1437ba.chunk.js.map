{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Content","className","RightPage","id","type","Button","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,sHCsB3C,SAASC,IACP,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACf,wBAAIA,UAAU,cAAd,aACA,uBAAGA,UAAU,aAAb,mHAEqC,6BAFrC,6BAKA,iDACA,8CACA,qEACA,oDACA,mDAGF,yBAAKA,UAAU,QACb,wBAAIA,UAAU,cAAd,2BACA,yBAAKA,UAAU,aACf,uBAAGA,UAAU,aAAb,gBAEA,+ZAMA,uBAAGA,UAAU,aAAb,wBAEA,4MASOC,MAxDf,WACE,OACE,yBAAKC,GAAG,QACR,yBAAKA,GAAG,gBACN,4BAAQC,KAAK,SAASH,UAAU,iBAAhC,SACA,4BAAQG,KAAK,SAASH,UAAU,iBAAhC,SACA,4BAAQG,KAAK,SAASH,UAAU,iBAAhC,SACA,kBAACI,EAAA,EAAD,OAEA,yBAAKF,GAAG,QACN,kBAACH,EAAD,SCJYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,eD0HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ad1437ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\n\n// potenial change, click to change language of website/ hover to translate\nfunction RightPage() {\n  return(\n    <div id=\"root\">\n    <div id=\"button_group\">\n      <button type=\"button\" className=\"btn btn-light\">Light</button>\n      <button type=\"button\" className=\"btn btn-light\">Light</button>\n      <button type=\"button\" className=\"btn btn-light\">Light</button>\n      <Button />\n    </div>\n      <div id=\"root\">\n        <Content />\n      </div>\n    </div>\n  )\n}\n\nfunction Content() {\n  return (\n    <div className=\"Content\">\n      <div className=\"card\">\n        <div className=\"card-body\">\n        <h4 className=\"card-title\">Who am I?</h4>\n        <p className=\"card-text\">\n        My name is Angie Ta, and I am a web/iOS developer and recent graduate from\n        the University of California, Davis. <br></br>\n        Some of my interests are:\n        </p>\n        <li>React/ReactNative</li>\n        <li>CS in Medicine</li>\n        <li>Linguistics/Learning Spoken Languages</li>\n        <li>Language Translation</li>\n        <li>Game Dev/Game Art</li>\n        </div>\n      </div>\n      <div className=\"card\">\n        <h4 className=\"card-title\">Projects and Experience</h4>\n        <div className=\"card-body\">\n        <p className=\"card-text\">PocketOphtho\n        </p>\n        <ul>\n        Created an interactive educational iOS application for Clinical Ophthalmology in a team for Glenn Yiu MD, PhD.,\n        a doctor of vision and clinical ophthalmology at the UC Davis Medical Center/\n        UC Davis School of Medicine. The application presents compiled clinical ophthalmology information in a way that\n        increases the efficency of review and study for clinical ophthalmology residents.\n        </ul>\n        <p className=\"card-text\">Google CSSI 2015 MTV\n        </p>\n        <ul>\n        Participated in an intensive programming institute developing web apps using HTML, CSS, JavaScript, Python and Google App Engine in the end, demoing to Google engineers.\n        </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RightPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RightPage from './App';\nimport Content from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RightPage />, document.getElementById('item-right'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}